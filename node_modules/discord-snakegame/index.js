const {
  createID,
  resizeMap,
  mixOptions,
  checkCoordinateObj
} = require("./functions");

const defOptions = {
  background: "🟫",
  snake_head: "🟠",
  snake_tail: "🟡",
  food: "🍎"
};

/**
 * @class
 * @description Making a snake game is now easier.
 */
class Discord_SnakeGame {
  /**
      * @constructor
      * @param {object} gameOptions You don't need to edit.
      * @example
        let SnakeGame = require("discord-snakegame");
        SnakeGame = new SnakeGame({ background: "🟫", snake_head: "🟠", snake_tail: "🟡", food: "🍎" });
     */
  constructor(options = defOptions) {
    this.options = mixOptions(options, defOptions);

    this.database = [];

    this.height = 10;
    this.width = 10;
  }
  /**
      * Game creation function.
      @param {string|number} id An identification number to which the game is assigned. 
      @returns {string}
      @example 
      let SnakeGame = require("discord-snakegame");
      SnakeGame = new SnakeGame();

      SnakeGame.createGame("helloWorld_1");
    */
  createGame(id) {
    if (!id) throw new Error("You must specify an ID");
    if (this.database.some(d => d.ID === id))
      throw new Error("There is already a game with this ID");

    const self = this;
    const snakeIndex = parseInt(Math.random() * 100);
    const foodIndex = parseInt(Math.random() * 100);

    const dbSchema = {
      ID: id,
      mapObjects: [],
      snake: [],
      userScore: 0,
      startedAt: Date.now()
    };

    let mapObjects = Array(100).fill({
      symbol: this.options.background,
      coordinats: { x: 0, y: 9 }
    });
    mapObjects = mapObjects.map((el, i) => {
      return {
        symbol:
          snakeIndex === i
            ? self.options.snake_head
            : foodIndex === i
            ? self.options.food
            : el.symbol,
        index: i,
        coordinats: {
          x: i % 10,
          y: i % 10 == 9 ? el.coordinats.y-- : el.coordinats.y
        }
      };
    });

    dbSchema.mapObjects = mapObjects;

    dbSchema.snake.push(dbSchema.mapObjects[snakeIndex].coordinats);
    dbSchema.food = { ...dbSchema.mapObjects[foodIndex].coordinats };

    this.database.push(dbSchema);

    return resizeMap(dbSchema.mapObjects);
  }
  /** 
      * Sets the snake position.
      @param {string|number} id An identification number to which the game is assigned.  
      @param {Object} coordinats Object for entering new coordinates. 
      @returns {string}
      @example
      let SnakeGame = require("discord-snakegame");
      SnakeGame = new SnakeGame();

      SnakeGame.moveSnake("helloWorld_1", { x: 5, y: 8 });
    */
  moveSnake(id, coordinats) {
    if (!id) throw new Error("You must specify an ID");
    if (!this.database.some(d => d.ID === id))
      throw new Error("There is already a no game with this ID");
    if (!coordinats)
      throw new Error(
        "You must specify an coordinate object (like a {x: 5, y: 1})"
      );
    if (!checkCoordinateObj(coordinats)) throw new Error("This is not a valid coordinate object. ");

    const self = this;
    const oldD = this.database.find(d => d.ID === id);

    oldD.snake.unshift({ ...coordinats });

    if (oldD.food.x === coordinats.x && oldD.food.y === coordinats.y) {
      oldD.userScore++;

      let foodIndex = createID(
        oldD.mapObjects,
        oldD.snake.map(s => {
          return oldD.mapObjects.findIndex(mO => mO.coordinats.x === s.x && mO.coordinats.y === s.y);
        })
      );

      oldD.mapObjects[foodIndex].symbol = this.options.food;
      oldD.food = oldD.mapObjects[foodIndex].coordinats;
    } else oldD.snake.pop();

    let mapObjects = Array(100).fill({
      symbol: this.options.background,
      coordinats: { x: 0, y: 9 }
    });
    mapObjects = mapObjects.map((el, i) => {
      let symbol = oldD.snake.findIndex(s => (
        s.x === i % 10 && s.y === (i % 10 == 9 ? el.coordinats.y - 1 : el.coordinats.y)
      ));
      if (symbol > -1) symbol = symbol === 0 ? self.options.snake_head : self.options.snake_tail;
      else if (
        oldD.food.x === i % 10 &&
        oldD.food.y === (i % 10 == 9 ? el.coordinats.y - 1 : el.coordinats.y)
      ) symbol = self.options.food;
      else symbol = self.options.background;

      return {
        symbol,
        index: i,
        coordinats: {
          x: i % 10,
          y: i % 10 == 9 ? el.coordinats.y-- : el.coordinats.y
        }
      };
    });

    oldD.mapObjects = mapObjects;

    this.database[this.database.findIndex(d => d.ID === id)] = oldD;

    return resizeMap(mapObjects);
  }
  /** 
      * Ends the game.
      @param {string|number} id An identification number to which the game is assigned.  
      @returns {boolean}
      @example
      let SnakeGame = require("discord-snakegame");
      SnakeGame = new SnakeGame();

      SnakeGame.endGame("helloWorld_1");
    */
  endGame(id) {
    if (!id) throw new Error("You must specify an ID");
    const index = this.database.findIndex(d => d.ID === id);
    if (index === -1) return false;
    this.database = this.database.filter(d => d.ID !== id);
    
    return true
  }
}
module.exports = Discord_SnakeGame;